{"version":3,"file":"extension.js","mappings":"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","sources":["../external commonjs \"path\"",".././src/decorationProvider.ts",".././src/brunoParser.ts","../external commonjs \"https\"",".././src/requestEditorProvider.ts","../external commonjs \"events\"",".././src/requestRunner.ts","../external commonjs \"fs\"","../external commonjs \"vscode\"","../external commonjs \"@usebruno/lang\"",".././src/extension.ts","../external commonjs \"http\"","../external commonjs \"url\"","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["module.exports = require(\"path\");","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { parseBruFile, parseBruFileFromPath } from './brunoParser';\n\n/**\n * This class provides file decorations for .bru files in VS Code's explorer\n * It adds HTTP method badges (GET, POST, etc.) to Bruno request files\n */\nexport class BrunoFileDecorationProvider implements vscode.FileDecorationProvider {\n  private _onDidChangeFileDecorations = new vscode.EventEmitter<vscode.Uri | vscode.Uri[] | undefined>();\n  readonly onDidChangeFileDecorations = this._onDidChangeFileDecorations.event;\n  private fileCache = new Map<string, { method: string, color: vscode.ThemeColor }>();\n  private outputChannel: vscode.OutputChannel;\n\n  constructor(outputChannel?: vscode.OutputChannel) {\n    this.outputChannel = outputChannel || vscode.window.createOutputChannel('Bruno');\n    this.outputChannel.appendLine('BrunoFileDecorationProvider initialized');\n    \n    // Refresh badges when files are saved\n    vscode.workspace.onDidSaveTextDocument((document: vscode.TextDocument) => {\n      if (document.fileName.endsWith('.bru')) {\n        this.outputChannel.appendLine(`File saved: ${document.fileName}`);\n        this.updateDecoration(document.uri);\n      }\n    });\n  }\n\n  /**\n   * Update decoration for a specific file\n   */\n  updateDecoration(uri: vscode.Uri): void {\n    try {\n      // Clear cache for this URI to ensure fresh data\n      this.fileCache.delete(uri.fsPath);\n      \n      // Trigger decoration update\n      this._onDidChangeFileDecorations.fire(uri);\n    } catch (error) {\n      this.outputChannel?.appendLine(`Error updating decoration for ${uri.fsPath}: ${error}`);\n    }\n  }\n\n  /**\n   * Refresh decorations for all known files\n   */\n  refreshDecorations(uri?: vscode.Uri): void {\n    if (uri) {\n      this.updateDecoration(uri);\n    } else {\n      this._onDidChangeFileDecorations.fire(undefined);\n    }\n  }\n\n  /**\n   * Get decoration for a specific Uri (file)\n   */\n  provideFileDecoration(uri: vscode.Uri): vscode.FileDecoration | undefined {\n    try {\n      if (!uri.fsPath.endsWith('.bru')) {\n        return undefined;\n      }\n\n      const fileName = path.basename(uri.fsPath);\n      \n      // Skip decoration for collection.bru and folder.bru files\n      if (fileName === 'collection.bru' || fileName === 'folder.bru') {\n        return undefined;\n      }\n\n      // Check cache first\n      if (this.fileCache.has(uri.fsPath)) {\n        const cached = this.fileCache.get(uri.fsPath)!;\n        return this.createDecoration(cached.method, cached.color);\n      }\n\n      // Parse the .bru file to get the HTTP method\n      const brunoRequest = parseBruFileFromPath(uri.fsPath);\n      \n      if (!brunoRequest || !brunoRequest.method) {\n        return undefined;\n      }\n\n      const method = brunoRequest.method.toUpperCase();\n      const color = this.getColorForMethod(method);\n      \n      // Cache the result\n      this.fileCache.set(uri.fsPath, { method, color });\n      \n      return this.createDecoration(method, color);\n    } catch (error) {\n      this.outputChannel?.appendLine(`Error providing decoration for ${uri.fsPath}: ${error}`);\n      return undefined;\n    }\n  }\n\n  /**\n   * Create a FileDecoration object for the given method\n   */\n  private createDecoration(method: string, color: vscode.ThemeColor): vscode.FileDecoration {\n    // Return both badge and suffix to show the method more prominently\n    return {\n      badge: method.charAt(0), // First letter of the method (G, P, etc.)\n      color: color,\n      tooltip: `HTTP ${method}`,\n      propagate: false\n    };\n  }\n\n  /**\n   * Get color for HTTP method\n   */\n  private getColorForMethod(method: string): vscode.ThemeColor {\n    switch (method.toUpperCase()) {\n      case 'GET':\n        return new vscode.ThemeColor('charts.blue');\n      case 'POST':\n        return new vscode.ThemeColor('charts.green');\n      case 'PUT':\n        return new vscode.ThemeColor('charts.orange');\n      case 'DELETE':\n        return new vscode.ThemeColor('charts.red');\n      case 'PATCH':\n        return new vscode.ThemeColor('charts.purple');\n      case 'HEAD':\n        return new vscode.ThemeColor('charts.violet');\n      case 'OPTIONS':\n        return new vscode.ThemeColor('charts.cyan');\n      default:\n        return new vscode.ThemeColor('charts.gray');\n    }\n  }\n} ","import * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Interface representing parsed Bruno request file content\n */\nexport interface BrunoRequestFile {\n  method: string;\n  url?: string;\n  type?: string;\n  name?: string;\n}\n\n/**\n * Parse a Bruno .bru file to extract HTTP method and other metadata\n * \n * @param content The content of the .bru file\n * @returns Parsed Bruno request data or undefined if parsing fails\n */\nexport function parseBruFile(content: string): BrunoRequestFile | undefined {\n  try {\n    // Extract HTTP method by looking for HTTP method blocks (get, post, put, etc.)\n    const httpMethodRegex = /(get|post|put|delete|patch|options|head|connect|trace)\\s*{/i;\n    const httpMethodMatch = content.match(httpMethodRegex);\n    \n    if (httpMethodMatch && httpMethodMatch[1]) {\n      const method = httpMethodMatch[1].toLowerCase();\n      \n      // Extract basic metadata\n      const result: BrunoRequestFile = {\n        method\n      };\n      \n      // Extract URL if present\n      const urlRegex = /url:\\s*([^\\n]+)/i;\n      const urlMatch = content.match(urlRegex);\n      if (urlMatch && urlMatch[1]) {\n        result.url = urlMatch[1].trim();\n      }\n      \n      // Extract name from meta block if present\n      const metaNameRegex = /meta\\s*{[^}]*name:\\s*([^\\n,]+)/i;\n      const metaNameMatch = content.match(metaNameRegex);\n      if (metaNameMatch && metaNameMatch[1]) {\n        result.name = metaNameMatch[1].trim();\n      }\n      \n      // Extract type from meta block if present\n      const metaTypeRegex = /meta\\s*{[^}]*type:\\s*([^\\n,]+)/i;\n      const metaTypeMatch = content.match(metaTypeRegex);\n      if (metaTypeMatch && metaTypeMatch[1]) {\n        result.type = metaTypeMatch[1].trim();\n      }\n      \n      return result;\n    }\n\n    // Check if this is a GraphQL request, which may not have a standard HTTP method block\n    const graphqlTypeRegex = /meta\\s*{[^}]*type:\\s*graphql/i;\n    if (content.match(graphqlTypeRegex)) {\n      return {\n        method: 'post', // GraphQL requests typically use POST\n        name: extractMetaName(content),\n        type: 'graphql'\n      };\n    }\n    \n    return undefined;\n  } catch (error) {\n    console.error('Error parsing .bru file:', error);\n    return undefined;\n  }\n}\n\n/**\n * Extract the name from a meta block\n */\nfunction extractMetaName(content: string): string {\n  const metaNameRegex = /meta\\s*{[^}]*name:\\s*([^\\n,]+)/i;\n  const metaNameMatch = content.match(metaNameRegex);\n  return metaNameMatch && metaNameMatch[1] ? metaNameMatch[1].trim() : 'Unnamed Request';\n}\n\n/**\n * Parse a Bruno .bru file from filesystem\n * \n * @param filePath Path to the .bru file\n * @returns Parsed Bruno request data or undefined if parsing fails\n */\nexport function parseBruFileFromPath(filePath: string): BrunoRequestFile | undefined {\n  try {\n    if (!fs.existsSync(filePath) || !filePath.endsWith('.bru')) {\n      return undefined;\n    }\n\n    // Skip folder.bru files which define collection structure, not requests\n    if (path.basename(filePath) === 'folder.bru') {\n      return undefined;\n    }\n    \n    const content = fs.readFileSync(filePath, 'utf-8');\n    return parseBruFile(content);\n  } catch (error) {\n    console.error(`Error parsing .bru file at ${filePath}:`, error);\n    return undefined;\n  }\n}\n\n/**\n * Check if a directory contains a Bruno collection\n * A Bruno collection contains either a bruno.json file or .bru files\n * \n * @param directoryPath Path to check\n * @returns true if directory is a Bruno collection\n */\nexport function isBrunoCollection(directoryPath: string): boolean {\n  try {\n    if (!fs.existsSync(directoryPath) || !fs.statSync(directoryPath).isDirectory()) {\n      return false;\n    }\n    \n    // Check for bruno.json\n    if (fs.existsSync(path.join(directoryPath, 'bruno.json'))) {\n      return true;\n    }\n    \n    // Check for .bru files\n    const files = fs.readdirSync(directoryPath);\n    return files.some(file => file.endsWith('.bru'));\n  } catch (error) {\n    console.error(`Error checking for Bruno collection at ${directoryPath}:`, error);\n    return false;\n  }\n} ","module.exports = require(\"https\");","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { parseBruFile, BrunoRequestFile } from './brunoParser';\nimport { onResponseReceived } from './requestRunner';\n\n// Try to import bruno-lang if available\nlet brunoLang: any;\ntry {\n  brunoLang = require('@usebruno/lang');\n} catch (error) {\n  console.warn('Bruno Lang module not available, will use basic parsing');\n}\n\n/**\n * Interface for request params\n */\ninterface RequestParam {\n  name: string;\n  value: string;\n  enabled?: boolean;\n}\n\n/**\n * Provider for Bruno Request Editor\n */\nexport class BrunoRequestEditorProvider implements vscode.CustomTextEditorProvider {\n  private static readonly viewType = 'bruno.requestEditor';\n  private readonly outputChannel: vscode.OutputChannel;\n  private readonly webviewPanels = new Map<string, vscode.WebviewPanel>();\n\n  constructor(\n    private readonly context: vscode.ExtensionContext,\n    outputChannel?: vscode.OutputChannel\n  ) {\n    this.outputChannel = outputChannel || vscode.window.createOutputChannel('Bruno Editor');\n    this.outputChannel.appendLine('Bruno Request Editor Provider initialized');\n\n    // Listen for responses from the request runner\n    onResponseReceived(({ uri, response }) => {\n      this.handleApiResponse(uri, response);\n    });\n  }\n\n  /**\n   * Register the custom editor provider\n   */\n  public static register(context: vscode.ExtensionContext, outputChannel?: vscode.OutputChannel): vscode.Disposable {\n    const provider = new BrunoRequestEditorProvider(context, outputChannel);\n    return vscode.window.registerCustomEditorProvider(\n      BrunoRequestEditorProvider.viewType, \n      provider, \n      {\n        webviewOptions: {\n          retainContextWhenHidden: true,\n        },\n        supportsMultipleEditorsPerDocument: false\n      }\n    );\n  }\n\n  /**\n   * Handle API responses from the request runner\n   */\n  private handleApiResponse(uri: vscode.Uri, response: { statusCode: number, headers: any, body: string }): void {\n    const uriString = uri.toString();\n    const panel = this.webviewPanels.get(uriString);\n    \n    if (panel) {\n      this.outputChannel.appendLine(`Updating webview with response for: ${uri.fsPath}`);\n      \n      // Format the response body if it's JSON\n      let formattedBody = response.body;\n      let prettyBody = false;\n      let isJson = false;\n      \n      try {\n        if (response.headers['content-type']?.includes('application/json')) {\n          isJson = true;\n          // Use a more reliable method to parse and format JSON\n          const parsedJson = JSON.parse(response.body);\n          // Use safe stringification to ensure all braces are preserved\n          formattedBody = JSON.stringify(parsedJson, null, 2);\n          prettyBody = true;\n        }\n      } catch (error) {\n        this.outputChannel.appendLine(`Error formatting JSON response: ${error}`);\n        // If JSON parsing failed but content-type is JSON, still mark as JSON but don't format\n        if (response.headers['content-type']?.includes('application/json')) {\n          isJson = true;\n          // Try to preserve the original content for raw display\n          formattedBody = response.body;\n        }\n      }\n      \n      // Format headers as a more structured object\n      const formattedHeaders = Object.entries(response.headers).map(([key, value]) => {\n        return { name: key, value: String(value) };\n      });\n      \n      // Calculate response time (mocked for now)\n      const responseTime = Math.floor(Math.random() * 1000) + 50; // Between 50-1050ms\n      \n      // Create timeline data\n      const timelineData = {\n        dns: 2,\n        tcp: 3,\n        tls: 5,\n        request: 10,\n        firstByte: 15,\n        download: responseTime - 35,\n        total: responseTime\n      };\n      \n      // Send the response to the webview\n      panel.webview.postMessage({\n        command: 'responseReceived',\n        statusCode: response.statusCode,\n        statusText: this.getStatusText(response.statusCode),\n        headers: formattedHeaders,\n        body: formattedBody,\n        prettyBody,\n        isJson,\n        responseTime,\n        timelineData\n      });\n    }\n  }\n\n  /**\n   * Get status text for a status code\n   */\n  private getStatusText(statusCode: number): string {\n    const statusTexts: Record<number, string> = {\n      200: 'OK',\n      201: 'Created',\n      204: 'No Content',\n      301: 'Moved Permanently',\n      302: 'Found',\n      304: 'Not Modified',\n      400: 'Bad Request',\n      401: 'Unauthorized',\n      403: 'Forbidden',\n      404: 'Not Found',\n      500: 'Internal Server Error',\n      502: 'Bad Gateway',\n      503: 'Service Unavailable'\n    };\n    \n    return statusTexts[statusCode] || '';\n  }\n\n  /**\n   * Called when a document is opened in the custom editor\n   */\n  async resolveCustomTextEditor(\n    document: vscode.TextDocument,\n    webviewPanel: vscode.WebviewPanel,\n    _token: vscode.CancellationToken\n  ): Promise<void> {\n    try {\n      // Store the webview panel for later updates\n      this.webviewPanels.set(document.uri.toString(), webviewPanel);\n      \n      // Configure the webview\n      webviewPanel.webview.options = {\n        enableScripts: true,\n        localResourceRoots: [\n          vscode.Uri.joinPath(this.context.extensionUri, 'resources'),\n        ]\n      };\n\n      // Initial load of the content\n      this.updateWebview(document, webviewPanel.webview);\n\n      // Setup event handlers\n      // When the document changes, update the webview\n      const changeDocumentSubscription = vscode.workspace.onDidChangeTextDocument(e => {\n        if (e.document.uri.toString() === document.uri.toString()) {\n          this.updateWebview(document, webviewPanel.webview);\n        }\n      });\n\n      // When the webview is closed, clean up resources\n      webviewPanel.onDidDispose(() => {\n        this.webviewPanels.delete(document.uri.toString());\n        changeDocumentSubscription.dispose();\n      });\n\n      // Handle messages from the webview\n      webviewPanel.webview.onDidReceiveMessage(message => {\n        this.handleMessage(document, message);\n      });\n    } catch (error) {\n      this.outputChannel.appendLine(`Error resolving custom editor: ${error}`);\n      vscode.window.showErrorMessage(`Error opening Bruno request: ${error}`);\n    }\n  }\n\n  /**\n   * Update the webview content with the document content\n   */\n  private updateWebview(document: vscode.TextDocument, webview: vscode.Webview): void {\n    try {\n      const content = document.getText();\n      const parsedRequest = parseBruFile(content);\n      \n      if (!parsedRequest) {\n        webview.html = this.getErrorHtml('Invalid Bruno request file');\n        return;\n      }\n\n      webview.html = this.getHtmlForWebview(webview, parsedRequest, content);\n    } catch (error) {\n      this.outputChannel.appendLine(`Error updating webview: ${error}`);\n      webview.html = this.getErrorHtml(`Error parsing the request: ${error}`);\n    }\n  }\n\n  /**\n   * Parse query parameters from content\n   */\n  private parseQueryParams(content: string): RequestParam[] {\n    const params: RequestParam[] = [];\n    const paramsQueryMatch = content.match(/params:query\\s*{([^}]*)}/s);\n    \n    if (paramsQueryMatch && paramsQueryMatch[1]) {\n      const paramsContent = paramsQueryMatch[1].trim();\n      const paramLines = paramsContent.split('\\n');\n      \n      for (const line of paramLines) {\n        const trimmedLine = line.trim();\n        if (!trimmedLine) continue;\n        \n        // Check if parameter is commented out/disabled\n        const enabled = !trimmedLine.startsWith('//');\n        const paramLine = enabled ? trimmedLine : trimmedLine.substring(2).trim();\n        \n        // Split by first colon to separate name and value\n        const colonIndex = paramLine.indexOf(':');\n        if (colonIndex !== -1) {\n          const name = paramLine.substring(0, colonIndex).trim();\n          const value = paramLine.substring(colonIndex + 1).trim();\n          \n          params.push({ name, value, enabled });\n        }\n      }\n    }\n    \n    return params;\n  }\n\n  /**\n   * Parse headers from content\n   */\n  private parseHeaders(content: string): RequestParam[] {\n    const headers: RequestParam[] = [];\n    const headersMatch = content.match(/headers\\s*{([^}]*)}/s);\n    \n    if (headersMatch && headersMatch[1]) {\n      const headersContent = headersMatch[1].trim();\n      const headerLines = headersContent.split('\\n');\n      \n      for (const line of headerLines) {\n        const trimmedLine = line.trim();\n        if (!trimmedLine) continue;\n        \n        // Check if header is commented out/disabled\n        const enabled = !trimmedLine.startsWith('//');\n        const headerLine = enabled ? trimmedLine : trimmedLine.substring(2).trim();\n        \n        // Split by first colon to separate name and value\n        const colonIndex = headerLine.indexOf(':');\n        if (colonIndex !== -1) {\n          const name = headerLine.substring(0, colonIndex).trim();\n          const value = headerLine.substring(colonIndex + 1).trim();\n          \n          headers.push({ name, value, enabled });\n        }\n      }\n    }\n    \n    return headers;\n  }\n\n  /**\n   * Handle messages from the webview\n   */\n  private handleMessage(document: vscode.TextDocument, message: any): void {\n    try {\n      this.outputChannel.appendLine(`Received message: ${JSON.stringify(message)}`);\n      \n      switch (message.command) {\n        case 'sendRequest':\n          // Execute the run request command\n          vscode.commands.executeCommand('bruno.runRequest', document.uri);\n          break;\n          \n        case 'updateRequest':\n          this.updateDocument(document, message);\n          break;\n          \n        case 'updateUrl':\n          this.updateUrlInDocument(document, message.url);\n          break;\n          \n        case 'updateQueryParams':\n          this.updateQueryParamsInDocument(document, message.params);\n          break;\n          \n        case 'updateHeaders':\n          this.updateHeadersInDocument(document, message.headers);\n          break;\n          \n        case 'updateBody':\n          this.updateBodyInDocument(document, message.body);\n          break;\n          \n        case 'saveDocument':\n          // Explicitly save the document\n          document.save();\n          break;\n      }\n    } catch (error) {\n      this.outputChannel.appendLine(`Error handling message: ${error}`);\n    }\n  }\n\n  /**\n   * Update the document with changes from the webview\n   */\n  private updateDocument(document: vscode.TextDocument, message: any): void {\n    // If bruno-lang is available, we could use it here for proper formatting\n    // For now, using simple string replacements\n    this.outputChannel.appendLine(`Updating document with changes: ${JSON.stringify(message)}`);\n    \n    const edit = new vscode.WorkspaceEdit();\n    \n    // Apply the edits\n    edit.replace(\n      document.uri,\n      new vscode.Range(0, 0, document.lineCount, 0),\n      message.content\n    );\n    \n    vscode.workspace.applyEdit(edit).then(success => {\n      if (success) {\n        this.outputChannel.appendLine('Document updated successfully');\n      } else {\n        this.outputChannel.appendLine('Failed to update document');\n        vscode.window.showErrorMessage('Failed to update the Bruno request file');\n      }\n    });\n  }\n\n  /**\n   * Update URL in the document\n   */\n  private updateUrlInDocument(document: vscode.TextDocument, url: string): void {\n    const content = document.getText();\n    const urlRegex = /url:\\s*([^\\n]+)/i;\n    const urlMatch = content.match(urlRegex);\n    \n    if (urlMatch) {\n      const edit = new vscode.WorkspaceEdit();\n      const startPos = document.positionAt(urlMatch.index!);\n      const endPos = document.positionAt(urlMatch.index! + urlMatch[0].length);\n      \n      edit.replace(document.uri, new vscode.Range(startPos, endPos), `url: ${url}`);\n      vscode.workspace.applyEdit(edit).then(() => {\n        // Notify the webview that the document was updated\n        this.notifyDocumentChanged(document.uri);\n      });\n    }\n  }\n\n  /**\n   * Update query parameters in the document\n   */\n  private updateQueryParamsInDocument(document: vscode.TextDocument, params: RequestParam[]): void {\n    const content = document.getText();\n    const paramsQueryMatch = content.match(/params:query\\s*{([^}]*)}/s);\n    \n    if (paramsQueryMatch) {\n      const edit = new vscode.WorkspaceEdit();\n      const startPos = document.positionAt(paramsQueryMatch.index! + 'params:query {'.length);\n      const endPos = document.positionAt(paramsQueryMatch.index! + paramsQueryMatch[0].length - 1);\n      \n      const paramsText = params.map(p => \n        `${p.enabled ? '' : '//'}${p.name}: ${p.value}`\n      ).join('\\n  ');\n      \n      edit.replace(document.uri, new vscode.Range(startPos, endPos), '\\n  ' + paramsText + '\\n');\n      vscode.workspace.applyEdit(edit).then(() => {\n        // Notify the webview that the document was updated\n        this.notifyDocumentChanged(document.uri);\n      });\n    }\n  }\n\n  /**\n   * Update headers in the document\n   */\n  private updateHeadersInDocument(document: vscode.TextDocument, headers: RequestParam[]): void {\n    const content = document.getText();\n    const headersMatch = content.match(/headers\\s*{([^}]*)}/s);\n    \n    if (headersMatch) {\n      const edit = new vscode.WorkspaceEdit();\n      const startPos = document.positionAt(headersMatch.index! + 'headers {'.length);\n      const endPos = document.positionAt(headersMatch.index! + headersMatch[0].length - 1);\n      \n      const headersText = headers.map(h => \n        `${h.enabled ? '' : '//'}${h.name}: ${h.value}`\n      ).join('\\n  ');\n      \n      edit.replace(document.uri, new vscode.Range(startPos, endPos), '\\n  ' + headersText + '\\n');\n      vscode.workspace.applyEdit(edit).then(() => {\n        // Notify the webview that the document was updated\n        this.notifyDocumentChanged(document.uri);\n      });\n    }\n  }\n\n  /**\n   * Update request body in the document\n   */\n  private updateBodyInDocument(document: vscode.TextDocument, body: string): void {\n    const content = document.getText();\n    const bodyMatch = content.match(/body(?::json|:text|:xml|:graphql)?\\s*{([^}]*)}/s);\n    \n    if (bodyMatch) {\n      const edit = new vscode.WorkspaceEdit();\n      \n      // Extract the body type (json, text, etc.)\n      const bodyTypeMatch = bodyMatch[0].match(/body(?::(\\w+))?\\s*{/);\n      const bodyType = bodyTypeMatch && bodyTypeMatch[1] ? `:${bodyTypeMatch[1]}` : '';\n      \n      const startPos = document.positionAt(bodyMatch.index! + `body${bodyType} {`.length);\n      const endPos = document.positionAt(bodyMatch.index! + bodyMatch[0].length - 1);\n      \n      edit.replace(document.uri, new vscode.Range(startPos, endPos), '\\n  ' + body + '\\n');\n      vscode.workspace.applyEdit(edit).then(() => {\n        // Notify the webview that the document was updated\n        this.notifyDocumentChanged(document.uri);\n      });\n    }\n  }\n\n  /**\n   * Notify webview that the document has changed\n   */\n  private notifyDocumentChanged(uri: vscode.Uri): void {\n    const uriString = uri.toString();\n    const panel = this.webviewPanels.get(uriString);\n    \n    if (panel) {\n      panel.webview.postMessage({\n        command: 'documentChanged'\n      });\n    }\n  }\n\n  /**\n   * Generate HTML for the webview based on the parsed request\n   */\n  private getHtmlForWebview(webview: vscode.Webview, request: BrunoRequestFile, rawContent: string): string {\n    // Get URI for styles for the webview\n    const stylesUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this.context.extensionUri, 'resources', 'styles.css')\n    );\n\n    const method = request.method?.toUpperCase() || 'GET';\n    const url = request.url || '';\n    \n    // Parse query params and headers\n    const queryParams = this.parseQueryParams(rawContent);\n    const headers = this.parseHeaders(rawContent);\n    \n    // Extract body and other components from raw content\n    let bodyType = 'text';\n    const bodyTypeMatch = rawContent.match(/body:(\\w+)\\s*{/);\n    if (bodyTypeMatch && bodyTypeMatch[1]) {\n      bodyType = bodyTypeMatch[1];\n    }\n    \n    const bodyMatch = rawContent.match(/body(?::json|:text|:xml|:graphql)?\\s*{([^}]*)}/s);\n    const body = bodyMatch ? bodyMatch[1].trim() : '';\n    \n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Bruno Request</title>\n        <link rel=\"stylesheet\" href=\"${stylesUri}\">\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"url-bar\">\n            <div class=\"method ${method}\">${method}</div>\n            <input type=\"text\" class=\"url-input\" id=\"url-input\" value=\"${url}\">\n            <button class=\"run-button\" id=\"send-request\">Send</button>\n          </div>\n          \n          <div class=\"tabs-container\">\n            <div class=\"main-tabs\">\n              <button class=\"tab active\" data-main-tab=\"request\">Request</button>\n              <button class=\"tab\" data-main-tab=\"response\">Response</button>\n            </div>\n            \n            <div class=\"main-content\">\n              <div class=\"request-section active\" id=\"request-section\">\n                <div class=\"tabs\">\n                  <button class=\"tab active\" data-tab=\"params\">Params<span class=\"tab-superscript\">${queryParams.length}</span></button>\n                  <button class=\"tab\" data-tab=\"body\">Body<span class=\"tab-superscript\">*</span></button>\n                  <button class=\"tab\" data-tab=\"headers\">Headers<span class=\"tab-superscript\">${headers.length}</span></button>\n                  <button class=\"tab\" data-tab=\"auth\">Auth</button>\n                  <button class=\"tab\" data-tab=\"vars\">Vars</button>\n                  <button class=\"tab\" data-tab=\"script\">Script</button>\n                  <button class=\"tab\" data-tab=\"assert\">Assert</button>\n                  <button class=\"tab\" data-tab=\"tests\">Tests</button>\n                  <button class=\"tab\" data-tab=\"docs\">Docs</button>\n                  <button class=\"tab\" data-tab=\"file\">File</button>\n                </div>\n                \n                <div id=\"params\" class=\"tab-content active\">\n                  <table class=\"params-table\">\n                    <thead>\n                      <tr>\n                        <th width=\"40%\">Name</th>\n                        <th width=\"60%\">Value</th>\n                      </tr>\n                    </thead>\n                    <tbody id=\"params-body\">\n                      ${queryParams.map((param, idx) => `\n                        <tr>\n                          <td><input type=\"text\" class=\"param-name\" data-idx=\"${idx}\" value=\"${param.name}\"></td>\n                          <td><input type=\"text\" class=\"param-value\" data-idx=\"${idx}\" value=\"${param.value}\"></td>\n                        </tr>\n                      `).join('')}\n                    </tbody>\n                  </table>\n                  <button class=\"add-row-button\" id=\"add-param\">+ Add Param</button>\n                </div>\n                \n                <div id=\"body\" class=\"tab-content\">\n                  <textarea class=\"body-editor\" id=\"body-editor\" data-type=\"${bodyType}\">${body}</textarea>\n                </div>\n                \n                <div id=\"headers\" class=\"tab-content\">\n                  <table class=\"headers-table\">\n                    <thead>\n                      <tr>\n                        <th width=\"40%\">Name</th>\n                        <th width=\"60%\">Value</th>\n                      </tr>\n                    </thead>\n                    <tbody id=\"headers-body\">\n                      ${headers.map((header, idx) => `\n                        <tr>\n                          <td><input type=\"text\" class=\"header-name\" data-idx=\"${idx}\" value=\"${header.name}\"></td>\n                          <td><input type=\"text\" class=\"header-value\" data-idx=\"${idx}\" value=\"${header.value}\"></td>\n                        </tr>\n                      `).join('')}\n                    </tbody>\n                  </table>\n                  <button class=\"add-row-button\" id=\"add-header\">+ Add Header</button>\n                </div>\n                \n                <div id=\"auth\" class=\"tab-content\">\n                  <div class=\"empty-state\">Authentication settings not implemented in this extension version.</div>\n                </div>\n                \n                <div id=\"vars\" class=\"tab-content\">\n                  <div class=\"empty-state\">Variables not implemented in this extension version.</div>\n                </div>\n                \n                <div id=\"script\" class=\"tab-content\">\n                  <div class=\"empty-state\">Scripts not implemented in this extension version.</div>\n                </div>\n                \n                <div id=\"assert\" class=\"tab-content\">\n                  <div class=\"empty-state\">Assertions not implemented in this extension version.</div>\n                </div>\n                \n                <div id=\"tests\" class=\"tab-content\">\n                  <div class=\"empty-state\">Tests not implemented in this extension version.</div>\n                </div>\n                \n                <div id=\"docs\" class=\"tab-content\">\n                  <div class=\"empty-state\">Documentation not implemented in this extension version.</div>\n                </div>\n                \n                <div id=\"file\" class=\"tab-content\">\n                  <div class=\"empty-state\">File properties not implemented in this extension version.</div>\n                </div>\n              </div>\n              \n              <div class=\"response-section\" id=\"response-section\">\n                <div class=\"tabs\">\n                  <button class=\"tab active\" data-tab=\"response\">Response</button>\n                  <button class=\"tab\" data-tab=\"headers\">Headers</button>\n                  <button class=\"tab\" data-tab=\"timeline\">Timeline</button>\n                  <button class=\"tab\" data-tab=\"tests\">Tests</button>\n                </div>\n                \n                <div id=\"response-body\" class=\"tab-content active\">\n                  <div class=\"empty-state\" id=\"response\">\n                    Send a request to see the response.\n                  </div>\n                </div>\n                \n                <div id=\"response-headers\" class=\"tab-content\">\n                  <div class=\"empty-state\">\n                    Send a request to see the response headers.\n                  </div>\n                </div>\n                \n                <div id=\"response-timeline\" class=\"tab-content\">\n                  <div class=\"empty-state\">\n                    Send a request to see the timeline.\n                  </div>\n                </div>\n                \n                <div id=\"response-tests\" class=\"tab-content\">\n                  <div class=\"empty-state\">\n                    Tests results not implemented in this extension version.\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <script>\n          (function() {\n            const vscode = acquireVsCodeApi();\n            let activeMainTab = 'request';\n            \n            // Store state\n            const state = {\n              url: \"${url}\",\n              queryParams: ${JSON.stringify(queryParams)},\n              headers: ${JSON.stringify(headers)},\n              body: ${JSON.stringify(body)},\n              bodyType: \"${bodyType}\"\n            };\n            \n            // Main tab switching\n            document.querySelectorAll('[data-main-tab]').forEach(tab => {\n              tab.addEventListener('click', () => {\n                // Hide all sections\n                document.querySelectorAll('.request-section, .response-section').forEach(section => {\n                  section.classList.remove('active');\n                });\n                \n                // Deactivate all main tabs\n                document.querySelectorAll('[data-main-tab]').forEach(t => {\n                  t.classList.remove('active');\n                });\n                \n                // Activate clicked tab\n                tab.classList.add('active');\n                activeMainTab = tab.getAttribute('data-main-tab');\n                \n                // Show corresponding section\n                document.getElementById(activeMainTab + '-section').classList.add('active');\n              });\n            });\n            \n            // Tab switching within sections\n            document.querySelectorAll('.tab:not([data-main-tab])').forEach(tab => {\n              tab.addEventListener('click', () => {\n                // Get the parent tabs container to only affect tabs in the same section\n                const tabsContainer = tab.closest('.tabs');\n                const section = tabsContainer.parentElement;\n                \n                // Hide all tab contents in this section\n                section.querySelectorAll('.tab-content').forEach(content => {\n                  content.classList.remove('active');\n                });\n                \n                // Deactivate all tabs in this section\n                tabsContainer.querySelectorAll('.tab').forEach(t => {\n                  t.classList.remove('active');\n                });\n                \n                // Activate clicked tab\n                tab.classList.add('active');\n                \n                // Show corresponding content\n                const tabId = tab.getAttribute('data-tab');\n                const tabContent = section.querySelector('#' + tabId) || \n                                   section.querySelector('#' + activeMainTab + '-' + tabId);\n                if (tabContent) {\n                  tabContent.classList.add('active');\n                }\n              });\n            });\n            \n            // URL input handling\n            const urlInput = document.getElementById('url-input');\n            urlInput.addEventListener('change', () => {\n              state.url = urlInput.value;\n              vscode.postMessage({\n                command: 'updateUrl',\n                url: urlInput.value\n              });\n            });\n            \n            // Body editor handling\n            const bodyEditor = document.getElementById('body-editor');\n            bodyEditor.addEventListener('change', () => {\n              state.body = bodyEditor.value;\n              vscode.postMessage({\n                command: 'updateBody',\n                body: bodyEditor.value\n              });\n            });\n            \n            // Query params handling\n            function setupParamHandlers() {\n              document.querySelectorAll('.param-name, .param-value').forEach(input => {\n                input.addEventListener('change', () => {\n                  const idx = parseInt(input.getAttribute('data-idx'));\n                  const isName = input.classList.contains('param-name');\n                  \n                  if (isName) {\n                    state.queryParams[idx].name = input.value;\n                  } else {\n                    state.queryParams[idx].value = input.value;\n                  }\n                  \n                  vscode.postMessage({\n                    command: 'updateQueryParams',\n                    params: state.queryParams\n                  });\n                });\n              });\n            }\n            \n            // Headers handling\n            function setupHeaderHandlers() {\n              document.querySelectorAll('.header-name, .header-value').forEach(input => {\n                input.addEventListener('change', () => {\n                  const idx = parseInt(input.getAttribute('data-idx'));\n                  const isName = input.classList.contains('header-name');\n                  \n                  if (isName) {\n                    state.headers[idx].name = input.value;\n                  } else {\n                    state.headers[idx].value = input.value;\n                  }\n                  \n                  vscode.postMessage({\n                    command: 'updateHeaders',\n                    headers: state.headers\n                  });\n                });\n              });\n            }\n            \n            // Add param button\n            document.getElementById('add-param').addEventListener('click', () => {\n              const paramsBody = document.getElementById('params-body');\n              const newIdx = state.queryParams.length;\n              \n              state.queryParams.push({ name: '', value: '', enabled: true });\n              \n              const newRow = document.createElement('tr');\n              newRow.innerHTML = \\`\n                <td><input type=\"text\" class=\"param-name\" data-idx=\"\\${newIdx}\" value=\"\"></td>\n                <td><input type=\"text\" class=\"param-value\" data-idx=\"\\${newIdx}\" value=\"\"></td>\n              \\`;\n              \n              paramsBody.appendChild(newRow);\n              setupParamHandlers();\n            });\n            \n            // Add header button\n            document.getElementById('add-header').addEventListener('click', () => {\n              const headersBody = document.getElementById('headers-body');\n              const newIdx = state.headers.length;\n              \n              state.headers.push({ name: '', value: '', enabled: true });\n              \n              const newRow = document.createElement('tr');\n              newRow.innerHTML = \\`\n                <td><input type=\"text\" class=\"header-name\" data-idx=\"\\${newIdx}\" value=\"\"></td>\n                <td><input type=\"text\" class=\"header-value\" data-idx=\"\\${newIdx}\" value=\"\"></td>\n              \\`;\n              \n              headersBody.appendChild(newRow);\n              setupHeaderHandlers();\n            });\n            \n            // Initialize handlers\n            setupParamHandlers();\n            setupHeaderHandlers();\n            \n            // Send request button\n            document.getElementById('send-request').addEventListener('click', () => {\n              vscode.postMessage({\n                command: 'sendRequest'\n              });\n              \n              // Switch to response tab\n              document.querySelector('[data-main-tab=\"response\"]').click();\n              document.getElementById('response').innerHTML = '<div class=\"empty-state\">Sending request...</div>';\n            });\n            \n            // Listen for messages from the extension\n            window.addEventListener('message', event => {\n              const message = event.data;\n              \n              switch (message.command) {\n                case 'responseReceived':\n                  // Update the response section\n                  const statusColorClass = message.statusCode >= 200 && message.statusCode < 300 \n                    ? 'success' \n                    : message.statusCode >= 400 ? 'error' : 'warning';\n                  \n                  // Handle JSON content more carefully\n                  let displayBody = message.body;\n                  if (message.isJson) {\n                    try {\n                      // Ensure we have a proper JSON string representation\n                      if (typeof message.body === 'string') {\n                        // Try to parse and then re-stringify to ensure proper formatting\n                        const parsedJson = JSON.parse(message.body);\n                        displayBody = JSON.stringify(parsedJson, null, 2);\n                      } else if (typeof message.body === 'object') {\n                        displayBody = JSON.stringify(message.body, null, 2);\n                      }\n                    } catch (e) {\n                      console.error('Error formatting JSON response:', e);\n                      // Keep original content if parsing fails\n                      displayBody = message.body;\n                    }\n                  }\n                  \n                  // Update response body tab\n                  document.getElementById('response').innerHTML = \\`\n                    <div class=\"response-status\">\n                      <span class=\"status-badge \\${statusColorClass}\">\\${message.statusCode}</span>\n                      <span>\\${message.statusText}</span>\n                      <span class=\"response-time\">\\${message.responseTime}ms</span>\n                    </div>\n                    <div class=\"response-content\">\n                      <pre>\\${message.isJson ? formatJsonSyntax(displayBody) : displayBody}</pre>\n                    </div>\n                  \\`;\n                  \n                  // Update headers tab with a table\n                  let headersHtml = '<table class=\"headers-table\"><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody>';\n                  message.headers.forEach(header => {\n                    headersHtml += \\`<tr><td>\\${header.name}</td><td>\\${header.value}</td></tr>\\`;\n                  });\n                  headersHtml += '</tbody></table>';\n                  \n                  document.getElementById('response-headers').innerHTML = headersHtml;\n                  \n                  // Update timeline tab with a more structured table\n                  const timelineData = message.timelineData;\n                  const timelineHtml = \\`\n                    <table class=\"timeline-table\">\n                      <thead>\n                        <tr>\n                          <th>Phase</th>\n                          <th>Duration</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr><td>DNS Lookup</td><td>\\${timelineData.dns}ms</td></tr>\n                        <tr><td>TCP Handshake</td><td>\\${timelineData.tcp}ms</td></tr>\n                        <tr><td>TLS Setup</td><td>\\${timelineData.tls}ms</td></tr>\n                        <tr><td>Request</td><td>\\${timelineData.request}ms</td></tr>\n                        <tr><td>Time to First Byte</td><td>\\${timelineData.firstByte}ms</td></tr>\n                        <tr><td>Content Download</td><td>\\${timelineData.download}ms</td></tr>\n                        <tr><td><strong>Total</strong></td><td><strong>\\${timelineData.total}ms</strong></td></tr>\n                      </tbody>\n                    </table>\n                  \\`;\n                  \n                  document.getElementById('response-timeline').innerHTML = timelineHtml;\n                  break;\n              }\n            });\n\n            // Keyboard shortcut handling\n            document.addEventListener('keydown', (e) => {\n              // Handle Cmd+S or Ctrl+S for saving\n              if ((e.metaKey || e.ctrlKey) && e.key === 's') {\n                e.preventDefault();\n                vscode.postMessage({\n                  command: 'saveDocument'\n                });\n              }\n            });\n\n            // Add these utility functions for JSON syntax highlighting\n\n            // Function to safely format JSON with syntax highlighting\n            function formatJsonSyntax(json) {\n              if (!json) return '';\n              \n              try {\n                // If json is a string but not properly formatted, try to parse and re-stringify it\n                if (typeof json !== 'string') {\n                  json = JSON.stringify(json, null, 2);\n                } else {\n                  // Try to parse and re-stringify to ensure proper formatting\n                  // But only if it looks like valid JSON\n                  if (json.trim().startsWith('{') || json.trim().startsWith('[')) {\n                    try {\n                      const parsed = JSON.parse(json);\n                      json = JSON.stringify(parsed, null, 2);\n                    } catch (e) {\n                      // If parsing fails, keep the original string\n                      console.log('Failed to parse JSON for highlighting:', e);\n                    }\n                  }\n                }\n                \n                // Escape HTML to prevent XSS\n                const escaped = json.replace(/&/g, '&amp;')\n                                  .replace(/</g, '&lt;')\n                                  .replace(/>/g, '&gt;');\n                \n                // Apply syntax highlighting without modifying the structure\n                // This regex carefully preserves all braces and structural elements\n                return escaped.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, \n                  function (match) {\n                    let cls = 'json-number';\n                    if (/^\"/.test(match)) {\n                      if (/:$/.test(match)) {\n                        cls = 'json-key';\n                      } else {\n                        cls = 'json-string';\n                      }\n                    } else if (/true|false/.test(match)) {\n                      cls = 'json-boolean';\n                    } else if (/null/.test(match)) {\n                      cls = 'json-null';\n                    }\n                    return '<span class=\"' + cls + '\">' + match + '</span>';\n                  }\n                );\n              } catch (error) {\n                console.error('Error in formatJsonSyntax:', error);\n                // If anything goes wrong, return the original content safely escaped\n                return json.replace(/&/g, '&amp;')\n                          .replace(/</g, '&lt;')\n                          .replace(/>/g, '&gt;');\n              }\n            }\n          }())\n        </script>\n      </body>\n      </html>\n    `;\n  }\n\n  /**\n   * Generate HTML for error display\n   */\n  private getErrorHtml(errorMessage: string): string {\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Error</title>\n        <style>\n          body {\n            font-family: var(--vscode-font-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);\n            padding: 20px;\n            color: var(--vscode-editor-foreground);\n            background-color: var(--vscode-editor-background);\n          }\n          .error {\n            color: var(--vscode-errorForeground);\n            border: 1px solid var(--vscode-errorForeground);\n            padding: 15px;\n            border-radius: 5px;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"error\">\n          <h3>Error Opening Bruno Request</h3>\n          <p>${errorMessage}</p>\n          <p>Please check if this is a valid Bruno request file.</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n} ","module.exports = require(\"events\");","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as http from 'http';\nimport * as https from 'https';\nimport { URL } from 'url';\nimport { parseBruFile } from './brunoParser';\nimport { EventEmitter } from 'events';\n\n// Create an event emitter for responses\nexport const responseEventEmitter = new EventEmitter();\nexport const onResponseReceived = (callback: (event: { uri: vscode.Uri, response: { statusCode: number, headers: any, body: string } }) => void) => {\n  responseEventEmitter.on('response', callback);\n  return { dispose: () => responseEventEmitter.removeListener('response', callback) };\n};\n\n/**\n * Class to run API requests from .bru files\n */\nexport class RequestRunner {\n  private outputChannel: vscode.OutputChannel;\n\n  constructor(outputChannel?: vscode.OutputChannel) {\n    this.outputChannel = outputChannel || vscode.window.createOutputChannel('Bruno');\n  }\n\n  /**\n   * Run a request from a .bru file\n   */\n  public async runRequest(fileUri: vscode.Uri): Promise<void> {\n    try {\n      this.outputChannel.appendLine(`Running request from: ${fileUri.fsPath}`);\n      this.outputChannel.show(true);\n\n      // Read the file content\n      const fileContent = await vscode.workspace.fs.readFile(fileUri);\n      const content = Buffer.from(fileContent).toString('utf8');\n\n      // Parse the Bruno file\n      const request = parseBruFile(content);\n      if (!request) {\n        this.outputChannel.appendLine('❌ Failed to parse the Bruno file');\n        vscode.window.showErrorMessage('Failed to parse the Bruno file');\n        return;\n      }\n\n      this.outputChannel.appendLine(`Method: ${request.method}`);\n      this.outputChannel.appendLine(`URL: ${request.url}`);\n\n      if (!request.url) {\n        this.outputChannel.appendLine('❌ URL is missing in the Bruno file');\n        vscode.window.showErrorMessage('URL is missing in the Bruno file');\n        return;\n      }\n\n      // Parse the URL\n      const parsedUrl = new URL(request.url);\n      \n      // Extract headers from the request\n      const headers: Record<string, string> = {};\n      \n      // Extract headers from the file content\n      const headersMatch = content.match(/headers\\s*{([^}]*)}/s);\n      if (headersMatch && headersMatch[1]) {\n        const headerLines = headersMatch[1].trim().split('\\n');\n        for (const line of headerLines) {\n          const headerParts = line.trim().split(':');\n          if (headerParts.length >= 2) {\n            const key = headerParts[0].trim();\n            const value = headerParts.slice(1).join(':').trim();\n            headers[key] = value;\n          }\n        }\n      }\n\n      // Create the request options\n      const options = {\n        method: request.method || 'GET',\n        headers: headers,\n        timeout: 30000\n      };\n\n      // Make the request\n      this.outputChannel.appendLine(`🚀 Sending ${options.method} request to ${request.url}...`);\n      \n      const httpModule = parsedUrl.protocol === 'https:' ? https : http;\n      \n      const req = httpModule.request(request.url, options, (res) => {\n        let data = '';\n        \n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n        \n        res.on('end', () => {\n          this.outputChannel.appendLine(`✅ Response received: ${res.statusCode}`);\n          this.outputChannel.appendLine('Headers:');\n          this.outputChannel.appendLine(JSON.stringify(res.headers, null, 2));\n          this.outputChannel.appendLine('Body:');\n          \n          // Properly handle JSON responses\n          let responseBody = data;\n          const contentType = res.headers['content-type'] || '';\n          const isJson = contentType.includes('application/json') || contentType.includes('json');\n          \n          if (isJson) {\n            try {\n              // Try to parse the JSON to ensure it's valid, but keep the original string for display\n              JSON.parse(data);\n              // If we get here, it's valid JSON\n              this.outputChannel.appendLine(data);\n            } catch (e: any) {\n              this.outputChannel.appendLine(`Warning: Response claims to be JSON but could not be parsed: ${e.message}`);\n              this.outputChannel.appendLine(data);\n            }\n          } else {\n            this.outputChannel.appendLine(data);\n          }\n          \n          // Emit the response event\n          responseEventEmitter.emit('response', {\n            uri: fileUri,\n            response: {\n              statusCode: res.statusCode || 0,\n              headers: res.headers,\n              body: data,\n              time: {\n                // Mock time metrics for now\n                total: Math.floor(Math.random() * 1000) + 50,\n                dns: Math.floor(Math.random() * 10) + 1,\n                tcp: Math.floor(Math.random() * 15) + 5,\n                tls: Math.floor(Math.random() * 20) + 10,\n                request: Math.floor(Math.random() * 30) + 20,\n                firstByte: Math.floor(Math.random() * 40) + 30,\n                download: Math.floor(Math.random() * 50) + 40\n              }\n            }\n          });\n        });\n      });\n      \n      req.on('error', (error) => {\n        this.outputChannel.appendLine(`❌ Error: ${error.message}`);\n        vscode.window.showErrorMessage(`Request failed: ${error.message}`);\n      });\n      \n      // Add request body if it exists and method is not GET\n      if (options.method !== 'GET') {\n        // Extract body from the file content\n        const bodyMatch = content.match(/body(?::json|:text|:xml|:graphql)?\\s*{([^}]*)}/s);\n        if (bodyMatch && bodyMatch[1]) {\n          const bodyContent = bodyMatch[1].trim();\n          req.write(bodyContent);\n        }\n      }\n      \n      req.end();\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      this.outputChannel.appendLine(`❌ Error: ${errorMessage}`);\n      vscode.window.showErrorMessage(`Failed to run request: ${errorMessage}`);\n    }\n  }\n} ","module.exports = require(\"fs\");","module.exports = require(\"vscode\");","module.exports = require(\"@usebruno/lang\");","// Simple extension.ts that will compile without VS Code types\n// We'll use 'any' types for now to make the compilation pass\n\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { BrunoFileDecorationProvider } from './decorationProvider';\nimport { RequestRunner } from './requestRunner';\nimport { parseBruFileFromPath } from './brunoParser';\nimport { BrunoRequestEditorProvider } from './requestEditorProvider';\n\n// Output channel for debugging\nlet outputChannel: vscode.OutputChannel;\n\n/**\n * This is called when the extension is activated\n */\nexport function activate(context: vscode.ExtensionContext) {\n  // Create our output channel\n  outputChannel = vscode.window.createOutputChannel('Bruno Extension');\n  outputChannel.show(true);\n  outputChannel.appendLine('Bruno VS Code extension is now active');\n  \n  // Log important info for debugging\n  outputChannel.appendLine(`Extension path: ${context.extensionPath}`);\n  \n  // Ensure our resources directory exists\n  const resourcesPath = path.join(context.extensionPath, 'resources');\n  outputChannel.appendLine(`Resources path: ${resourcesPath}`);\n  outputChannel.appendLine(`Resources exist: ${fs.existsSync(resourcesPath)}`);\n  \n  // Create instances of our main components\n  const decorationProvider = new BrunoFileDecorationProvider(outputChannel);\n  const requestRunner = new RequestRunner(outputChannel);\n\n  // Register the decoration provider to decorate .bru files with HTTP method badges\n  const decorationDisposable = vscode.window.registerFileDecorationProvider(decorationProvider);\n  context.subscriptions.push(decorationDisposable);\n  outputChannel.appendLine('File decoration provider registered');\n\n  // Register the custom editor provider\n  const editorDisposable = BrunoRequestEditorProvider.register(context, outputChannel);\n  context.subscriptions.push(editorDisposable);\n  outputChannel.appendLine('Custom editor provider registered');\n\n  // Register the command to run a Bruno request\n  const runRequestDisposable = vscode.commands.registerCommand('bruno.runRequest', async (uri?: vscode.Uri) => {\n    try {\n      outputChannel.appendLine(`Run request command triggered for: ${uri?.fsPath || 'active editor'}`);\n      \n      // If URI is not provided, get the active editor's document\n      if (!uri) {\n        const activeEditor = vscode.window.activeTextEditor;\n        if (!activeEditor || !activeEditor.document.fileName.endsWith('.bru')) {\n          vscode.window.showErrorMessage('No .bru file is currently active');\n          outputChannel.appendLine('No .bru file is active');\n          return;\n        }\n        uri = activeEditor.document.uri;\n      }\n      \n      const fileName = path.basename(uri.fsPath);\n      if (fileName === 'folder.bru' || fileName === 'collection.bru') {\n        vscode.window.showErrorMessage('Cannot run folder.bru or collection.bru files as they are not API requests');\n        outputChannel.appendLine('Attempted to run folder.bru or collection.bru file');\n        return;\n      }\n      \n      await requestRunner.runRequest(uri);\n    } catch (error) {\n      outputChannel.appendLine(`Error: ${error instanceof Error ? error.message : String(error)}`);\n      vscode.window.showErrorMessage(`Failed to run request: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  });\n  context.subscriptions.push(runRequestDisposable);\n  outputChannel.appendLine('Run request command registered');\n\n  // Register commands to switch between editor modes\n  const openInTextEditorDisposable = vscode.commands.registerCommand('bruno.openInTextEditor', async (uri?: vscode.Uri) => {\n    try {\n      // If URI is not provided, get the active editor's document\n      if (!uri) {\n        const activeEditor = vscode.window.activeTextEditor;\n        if (!activeEditor || !activeEditor.document.fileName.endsWith('.bru')) {\n          vscode.window.showErrorMessage('No .bru file is currently active');\n          return;\n        }\n        uri = activeEditor.document.uri;\n      }\n\n      // Close any custom editor instances of this document\n      await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n\n      // Open in text editor\n      const document = await vscode.workspace.openTextDocument(uri);\n      await vscode.window.showTextDocument(document);\n      outputChannel.appendLine(`Opened ${uri.fsPath} in text editor`);\n    } catch (error) {\n      outputChannel.appendLine(`Error opening in text editor: ${error}`);\n      vscode.window.showErrorMessage(`Failed to open in text editor: ${error}`);\n    }\n  });\n  context.subscriptions.push(openInTextEditorDisposable);\n  outputChannel.appendLine('Open in text editor command registered');\n\n  const openInUIEditorDisposable = vscode.commands.registerCommand('bruno.openInUIEditor', async (uri?: vscode.Uri) => {\n    try {\n      // If URI is not provided, get the active editor's document\n      if (!uri) {\n        const activeEditor = vscode.window.activeTextEditor;\n        if (!activeEditor || !activeEditor.document.fileName.endsWith('.bru')) {\n          vscode.window.showErrorMessage('No .bru file is currently active');\n          return;\n        }\n        uri = activeEditor.document.uri;\n      }\n\n      // Check if this is a folder.bru or collection.bru file\n      const fileName = path.basename(uri.fsPath);\n      if (fileName === 'folder.bru' || fileName === 'collection.bru') {\n        vscode.window.showErrorMessage('Cannot open folder.bru or collection.bru files in UI editor');\n        return;\n      }\n\n      // Close any text editor instances of this document\n      await vscode.commands.executeCommand('workbench.action.closeActiveEditor');\n\n      // Open in custom editor\n      await vscode.commands.executeCommand('vscode.openWith', uri, 'bruno.requestEditor');\n      outputChannel.appendLine(`Opened ${uri.fsPath} in UI editor`);\n    } catch (error) {\n      outputChannel.appendLine(`Error opening in UI editor: ${error}`);\n      vscode.window.showErrorMessage(`Failed to open in UI editor: ${error}`);\n    }\n  });\n  context.subscriptions.push(openInUIEditorDisposable);\n  outputChannel.appendLine('Open in UI editor command registered');\n\n  // Listen for configuration changes\n  vscode.workspace.onDidChangeConfiguration(e => {\n    if (e.affectsConfiguration('bruno.editor.defaultMode')) {\n      outputChannel.appendLine('Bruno editor mode preference changed');\n    }\n  });\n\n  // Set up file system watcher to automatically apply decorations\n  const fileSystemWatcher = vscode.workspace.createFileSystemWatcher('**/*.bru');\n  fileSystemWatcher.onDidCreate((uri) => {\n    outputChannel.appendLine(`File created: ${uri.fsPath}`);\n    decorationProvider.updateDecoration(uri);\n  });\n  fileSystemWatcher.onDidChange((uri) => {\n    outputChannel.appendLine(`File changed: ${uri.fsPath}`);\n    decorationProvider.updateDecoration(uri);\n  });\n  fileSystemWatcher.onDidDelete((uri) => {\n    outputChannel.appendLine(`File deleted: ${uri.fsPath}`);\n    decorationProvider.updateDecoration(uri);\n  });\n  context.subscriptions.push(fileSystemWatcher);\n  outputChannel.appendLine('File system watcher registered');\n\n  // Find all .bru files in workspace and apply decorations on startup\n  findAndDecorateAllBruFiles(decorationProvider);\n\n  // Force immediate decoration of visible files\n  if (vscode.window.activeTextEditor?.document.fileName.endsWith('.bru')) {\n    decorationProvider.updateDecoration(vscode.window.activeTextEditor.document.uri);\n    outputChannel.appendLine(`Applied decoration to active editor: ${vscode.window.activeTextEditor.document.uri.fsPath}`);\n  }\n\n  outputChannel.appendLine('Extension activation complete');\n  return {\n    decorationProvider,\n    requestRunner\n  };\n}\n\n/**\n * Find all .bru files in the workspace and apply decorations\n */\nasync function findAndDecorateAllBruFiles(decorationProvider: BrunoFileDecorationProvider) {\n  try {\n    // Get all .bru files in the workspace\n    outputChannel.appendLine('Searching for .bru files in workspace...');\n    const files = await vscode.workspace.findFiles('**/*.bru', '**/node_modules/**');\n    outputChannel.appendLine(`Found ${files.length} .bru files`);\n    \n    // Trigger decoration update for each file\n    files.forEach(fileUri => {\n      decorationProvider.updateDecoration(fileUri);\n    });\n  } catch (error) {\n    outputChannel.appendLine(`Error finding .bru files: ${error}`);\n  }\n}\n\nexport function deactivate() {\n  outputChannel.appendLine('Bruno VS Code extension deactivated');\n} ","module.exports = require(\"http\");","module.exports = require(\"url\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(690);\n",""],"names":[],"sourceRoot":""}